/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Idw3Bridge, Idw3BridgeInterface } from "../Idw3Bridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f68061001f6000396000f3fe608060405260043610601c5760003560e01c8063261bb466146021575b600080fd5b60376004803603810190603391906098565b6039565b005b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000606a826041565b9050919050565b6078816061565b8114608257600080fd5b50565b6000813590506092816071565b92915050565b60006020828403121560ab5760aa603c565b5b600060b7848285016085565b9150509291505056fea2646970667358221220161f7d675a4c2c30088ebabfa580db518d0269f0b750083affa381e1ff4659ed64736f6c63430008120033";

type Idw3BridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Idw3BridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Idw3Bridge__factory extends ContractFactory {
  constructor(...args: Idw3BridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Idw3Bridge> {
    return super.deploy(overrides || {}) as Promise<Idw3Bridge>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Idw3Bridge {
    return super.attach(address) as Idw3Bridge;
  }
  override connect(signer: Signer): Idw3Bridge__factory {
    return super.connect(signer) as Idw3Bridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Idw3BridgeInterface {
    return new utils.Interface(_abi) as Idw3BridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Idw3Bridge {
    return new Contract(address, _abi, signerOrProvider) as Idw3Bridge;
  }
}
